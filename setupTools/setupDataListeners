import boto3
import json
import time
import zipfile
import os
from botocore.exceptions import ClientError

# Initialize boto3 clients
s3_client = boto3.client('s3')
iam_client = boto3.client('iam')
config_client = boto3.client('config')
rds_client = boto3.client('rds')
lambda_client = boto3.client('lambda')
events_client = boto3.client('events')
secrets_client = boto3.client('secretsmanager')

# Configuration Variables
S3_BUCKET_NAME = 'Forge-AWS-CONFIG-DATA'  # Replace with a unique bucket name
REGION = 'us-east-1'  # Replace with your desired AWS region
LAMBDA_ROLE_NAME = 'LambdaAWSConfigIngestionRole'
CONFIG_ROLE_NAME = 'AWSConfigRole'
RDS_INSTANCE_IDENTIFIER = 'aws-config-db'
DB_NAME = 'awsconfigdb'
DB_USERNAME = 'admin'  # Choose a secure username
DB_PASSWORD = 'TeamForge!'  # Choose a secure password
LAMBDA_FUNCTION_NAME = 'AWSConfigIngestionFunction'
LAMBDA_ZIP_PATH = 'lambda_function.zip'  # Path to your Lambda ZIP file
SECRET_NAME = 'AWSConfigDBCredentials'

# Helper function to create S3 bucket
def create_s3_bucket(bucket_name, region):
    try:
        if region == 'us-east-1':
            response = s3_client.create_bucket(Bucket=bucket_name)
        else:
            response = s3_client.create_bucket(
                Bucket=bucket_name,
                CreateBucketConfiguration={'LocationConstraint': region}
            )
        print(f"S3 bucket '{bucket_name}' created successfully.")
    except ClientError as e:
        if e.response['Error']['Code'] == 'BucketAlreadyOwnedByYou':
            print(f"S3 bucket '{bucket_name}' already exists and is owned by you.")
        else:
            print(f"Error creating S3 bucket: {e}")
            raise

# Helper function to create IAM role
def create_iam_role(role_name, assume_role_policy_document, description=''):
    try:
        response = iam_client.create_role(
            RoleName=role_name,
            AssumeRolePolicyDocument=json.dumps(assume_role_policy_document),
            Description=description
        )
        print(f"IAM role '{role_name}' created successfully.")
        return response['Role']['Arn']
    except ClientError as e:
        if e.response['Error']['Code'] == 'EntityAlreadyExists':
            print(f"IAM role '{role_name}' already exists.")
            role = iam_client.get_role(RoleName=role_name)
            return role['Role']['Arn']
        else:
            print(f"Error creating IAM role '{role_name}': {e}")
            raise

# Helper function to attach policy to role
def attach_policy_to_role(role_name, policy_arn):
    try:
        iam_client.attach_role_policy(RoleName=role_name, PolicyArn=policy_arn)
        print(f"Policy '{policy_arn}' attached to role '{role_name}'.")
    except ClientError as e:
        print(f"Error attaching policy to role '{role_name}': {e}")
        raise

# Helper function to create AWS Config
def setup_aws_config(bucket_name, config_role_arn, region):
    try:
        # Get all supported resource types
        resource_types = config_client.describe_aggregation_authorizations()['AggregationAuthorizations']
        # Setup AWS Config delivery channel
        config_client.put_delivery_channel(
            DeliveryChannel={
                'name': 'default',
                's3BucketName': bucket_name,
                'configSnapshotDeliveryProperties': {
                    'deliveryFrequency': 'TwentyFour_Hours'
                }
            }
        )
        print("AWS Config delivery channel set up successfully.")
        # Start AWS Config
        config_client.start_config_rules_evaluation()
        config_client.put_configuration_recorder(
            ConfigurationRecorder={
                'name': 'default',
                'roleARN': config_role_arn,
                'recordingGroup': {
                    'allSupported': True,
                    'includeGlobalResourceTypes': True
                }
            }
        )
        config_client.start_configuration_recorder(ConfigurationRecorderName='default')
        print("AWS Config recorder started successfully.")
    except ClientError as e:
        print(f"Error setting up AWS Config: {e}")
        raise

# Helper function to create RDS PostgreSQL instance
def create_rds_instance(db_identifier, db_name, master_username, master_password, region):
    try:
        response = rds_client.create_db_instance(
            DBInstanceIdentifier=db_identifier,
            DBName=db_name,
            AllocatedStorage=20,
            DBInstanceClass='db.t3.micro',
            Engine='postgres',
            MasterUsername=master_username,
            MasterUserPassword=master_password,
            VpcSecurityGroupIds=[],  # You may need to specify security groups
            AvailabilityZone=f"{region}a",
            BackupRetentionPeriod=7,
            MultiAZ=False,
            PubliclyAccessible=True,
            StorageType='gp2',
            EngineVersion='13.3',
            AutoMinorVersionUpgrade=True,
            Tags=[
                {
                    'Key': 'Name',
                    'Value': 'AWSConfigDB'
                },
            ],
        )
        print(f"RDS instance '{db_identifier}' creation initiated.")
        # Wait until the RDS instance is available
        waiter = rds_client.get_waiter('db_instance_available')
        waiter.wait(DBInstanceIdentifier=db_identifier)
        print(f"RDS instance '{db_identifier}' is now available.")
    except ClientError as e:
        if e.response['Error']['Code'] == 'DBInstanceAlreadyExists':
            print(f"RDS instance '{db_identifier}' already exists.")
        else:
            print(f"Error creating RDS instance: {e}")
            raise

# Helper function to create a secret in Secrets Manager
def create_secret(secret_name, username, password):
    try:
        response = secrets_client.create_secret(
            Name=secret_name,
            SecretString=json.dumps({
                'username': username,
                'password': password
            })
        )
        print(f"Secret '{secret_name}' created successfully.")
    except ClientError as e:
        if e.response['Error']['Code'] == 'ResourceExistsException':
            print(f"Secret '{secret_name}' already exists.")
        else:
            print(f"Error creating secret: {e}")
            raise

# Helper function to create Lambda function
def create_lambda_function(function_name, role_arn, handler, zip_path, runtime='python3.9'):
    try:
        with open(zip_path, 'rb') as f:
            zipped_code = f.read()
        response = lambda_client.create_function(
            FunctionName=function_name,
            Runtime=runtime,
            Role=role_arn,
            Handler=handler,
            Code={'ZipFile': zipped_code},
            Description='Lambda function to ingest AWS Config data into RDS',
            Timeout=300,
            MemorySize=256,
            Publish=True,
            Environment={
                'Variables': {
                    'SECRET_NAME': SECRET_NAME,
                    'DB_NAME': DB_NAME
                }
            },
            VpcConfig={
                # Add your VPC configuration if your RDS is in a VPC
                # 'SubnetIds': ['subnet-xxxxxx'],
                # 'SecurityGroupIds': ['sg-xxxxxx'],
            },
        )
        print(f"Lambda function '{function_name}' created successfully.")
    except ClientError as e:
        if e.response['Error']['Code'] == 'ResourceConflictException':
            print(f"Lambda function '{function_name}' already exists. Updating code...")
            with open(zip_path, 'rb') as f:
                zipped_code = f.read()
            lambda_client.update_function_code(
                FunctionName=function_name,
                ZipFile=zipped_code,
                Publish=True
            )
            print(f"Lambda function '{function_name}' code updated successfully.")
        else:
            print(f"Error creating/updating Lambda function: {e}")
            raise

# Helper function to add permissions to Lambda for EventBridge
def add_lambda_permission(function_name, statement_id, action, principal, source_arn):
    try:
        response = lambda_client.add_permission(
            FunctionName=function_name,
            StatementId=statement_id,
            Action=action,
            Principal=principal,
            SourceArn=source_arn
        )
        print(f"Permission '{statement_id}' added to Lambda function '{function_name}'.")
    except ClientError as e:
        if e.response['Error']['Code'] == 'ResourceConflictException':
            print(f"Permission '{statement_id}' already exists for Lambda function '{function_name}'.")
        else:
            print(f"Error adding permission to Lambda function: {e}")
            raise

# Helper function to create EventBridge rule
def create_eventbridge_rule(rule_name, event_pattern):
    try:
        response = events_client.put_rule(
            Name=rule_name,
            EventPattern=json.dumps(event_pattern),
            State='ENABLED',
            Description='Rule to trigger Lambda on AWS Config changes',
            EventBusName='default'
        )
        print(f"EventBridge rule '{rule_name}' created/updated successfully.")
        return response['RuleArn']
    except ClientError as e:
        print(f"Error creating EventBridge rule: {e}")
        raise

# Helper function to add Lambda as target to EventBridge rule
def add_target_to_rule(rule_name, function_arn):
    try:
        response = events_client.put_targets(
            Rule=rule_name,
            Targets=[
                {
                    'Id': '1',
                    'Arn': function_arn
                }
            ]
        )
        print(f"Lambda function added as target to EventBridge rule '{rule_name}'.")
    except ClientError as e:
        print(f"Error adding target to EventBridge rule: {e}")
        raise

def main():
    # 1. Create S3 Bucket for AWS Config
    create_s3_bucket(S3_BUCKET_NAME, REGION)
    
    # 2. Create IAM Role for AWS Config
    config_assume_role_policy = {
        "Version": "2012-10-17",
        "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": "config.amazonaws.com"},
            "Action": "sts:AssumeRole"
        }]
    }
    config_role_arn = create_iam_role(CONFIG_ROLE_NAME, config_assume_role_policy, description='Role for AWS Config to access S3')
    
    # Attach AWS managed policy for AWS Config
    attach_policy_to_role(CONFIG_ROLE_NAME, 'arn:aws:iam::aws:policy/service-role/AWSConfigRole')
    
    # 3. Enable AWS Config
    setup_aws_config(S3_BUCKET_NAME, config_role_arn, REGION)
    
    # 4. Create Secret in Secrets Manager for RDS Credentials
    create_secret(SECRET_NAME, DB_USERNAME, DB_PASSWORD)
    
    # 5. Create RDS PostgreSQL Instance
    create_rds_instance(RDS_INSTANCE_IDENTIFIER, DB_NAME, DB_USERNAME, DB_PASSWORD, REGION)
    
    # 6. Create IAM Role for Lambda
    lambda_assume_role_policy = {
        "Version": "2012-10-17",
        "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": "lambda.amazonaws.com"},
            "Action": "sts:AssumeRole"
        }]
    }
    lambda_role_arn = create_iam_role(LAMBDA_ROLE_NAME, lambda_assume_role_policy, description='Role for Lambda to access S3, Secrets Manager, and RDS')
    
    # Attach necessary policies to Lambda role
    # AWSLambdaBasicExecutionRole for CloudWatch Logs
    attach_policy_to_role(LAMBDA_ROLE_NAME, 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole')
    # Access to S3
    attach_policy_to_role(LAMBDA_ROLE_NAME, 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess')
    # Access to Secrets Manager
    attach_policy_to_role(LAMBDA_ROLE_NAME, 'arn:aws:iam::aws:policy/SecretsManagerReadWrite')
    # Access to RDS (you might need to customize this policy)
    rds_access_policy = {
        "Version": "2012-10-17",
        "Statement": [{
            "Effect": "Allow",
            "Action": [
                "rds:DescribeDBInstances"
            ],
            "Resource": "*"
        }]
    }
    iam_client.put_role_policy(
        RoleName=LAMBDA_ROLE_NAME,
        PolicyName='LambdaRDSAccessPolicy',
        PolicyDocument=json.dumps(rds_access_policy)
    )
    print(f"Custom RDS access policy attached to Lambda role '{LAMBDA_ROLE_NAME}'.")
    
    # 7. Create Lambda Function
    create_lambda_function(
        function_name=LAMBDA_FUNCTION_NAME,
        role_arn=lambda_role_arn,
        handler='lambda_function.lambda_handler',  # Update based on your handler
        zip_path=LAMBDA_ZIP_PATH,
        runtime='python3.9'
    )
    
    # 8. Create EventBridge Rule for AWS Config Changes
    event_pattern = {
        "source": ["aws.config"],
        "detail-type": ["Config Rules Compliance Change", "Config Configuration Item Change"]
    }
    rule_name = 'AWSConfigChangeRule'
    rule_arn = create_eventbridge_rule(rule_name, event_pattern)
    
    # 9. Add Lambda as Target to EventBridge Rule
    lambda_info = lambda_client.get_function(FunctionName=LAMBDA_FUNCTION_NAME)
    lambda_arn = lambda_info['Configuration']['FunctionArn']
    add_target_to_rule(rule_name, lambda_arn)
    
    # 10. Add Permission for EventBridge to Invoke Lambda
    add_lambda_permission(
        function_name=LAMBDA_FUNCTION_NAME,
        statement_id='EventBridgeInvoke',
        action='lambda:InvokeFunction',
        principal='events.amazonaws.com',
        source_arn=rule_arn
    )
    
    print("Setup completed successfully.")

if __name__ == "__main__":
    main()
